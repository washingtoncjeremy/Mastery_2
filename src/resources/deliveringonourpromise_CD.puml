@startuml
'https://plantuml.com/class-diagram

class GetPromiseHistoryByOrderIdActivity{

-ReadOnlyDao<String, Order> orderDao

-ReadOnlyDao<String, List<Promise>> promiseDao

+PromiseHistory getPromiseHistoryByOrderId(String orderId)

+GetPromiseHistoryByOrderIdActivity(ReadOnlyDao<String, Order> orderDao,
                                              ReadOnlyDao<String, List<Promise>> promiseDao)

}

class OrderDao{

-OrderManipulationAuthorityClient omaClient

+public OrderDao(OrderManipulationAuthorityClient client)

+Order get(String OrderId)
-OrderItem convertToOrderItem(OrderResultItem orderResultItem)

}

class PromiseDao{

-DeliveryPromiseServiceClient dpsClient
-OrderManipulationAuthorityClient omaClient

+PromiseDao(DeliveryPromiseServiceClient dpsClient, OrderManipulationAuthorityClient omaClient)
+List<Promise> get(String customerOrderItemId)

-ZonedDateTime getDeliveryDateForOrderItem(String customerOrderItemId)

}


interface ReadOnlyDao{

get(I orderId)

}


class DeliveryPromiseServiceClient{

-DeliveryPromiseService dpService
+DeliveryPromiseServiceClient(DeliveryPromiseService dpService)
+Promise getDeliveryPromiseByOrderItemId(String customerOrderItemId)

}

class OrderFulfillmentServiceClient{

-OrderFulfillmentService ofService
+OrderFulfillmentServiceClient(OrderFulfillmentService ofs)
+OrderPromise getOrderPromiseByOrderItemId(String orderId)

}

class OrderManipulationAuthorityClient{

-OrderManipulationAuthority omaService
+OrderManipulationAuthorityClient(OrderManipulationAuthority service)
+OrderResult getCustomerOrderByOrderId(String orderId)
+OrderResultItem getCustomerOrderItemByOrderItemId(String orderItemId)

}

class PromiseHistoryClient{

-GetPromiseHistoryByOrderIdActivity getPromiseHistoryByOrderIdActivity
+PromiseHistoryClient(GetPromiseHistoryByOrderIdActivity getPromiseHistoryByOrderIdActivity)
+PromiseHistory getPromiseHistoryByOrderId(String orderId)

}

class Order{

+String orderId
+String orderId;
+String customerId;
+String marketplaceId;
+OrderCondition condition;
+List<OrderItem> customerOrderItemList = new ArrayList<>();
+String shipOption;
+ZonedDateTime orderDate;

-Order()
+{static} Builder builder()
+String getOrderId()
+String getMarketplaceId()
+OrderCondition getCondition()
+List<OrderItem> getCustomerOrderItemList()
+String getShipOption()
+ZonedDateTime getOrderDate()
+String toString()

+ {static} class Builder

}

class OrderItem{

-String customerOrderItemId;
-String orderId;
-String asin;
-String merchantId;
-int quantity;
-String title;
-boolean isConfidenceTracked;
-int confidence;

-OrderItem()
+{static} Builder builder()
+String getCustomerOrderItemId()
+String getOrderId()
+String getAsin()
+String getMerchantId()
+int getQuantity()
+String getTitle()
+boolean isConfidenceTracked()
+int getConfidence()
+boolean equals(Object o)
+int hashCode()
+String toString()
+{static} class Builder

}

class Promise{

-String customerOrderItemId;
-String asin;
-boolean active;
-ZonedDateTime promiseEffectiveDate;
-ZonedDateTime promiseLatestArrivalDate;
-ZonedDateTime promiseLatestShipDate;
-ZonedDateTime deliveryDate;
-String promiseProvidedBy;
-int confidence;

-Promise()

+{static} Builder builder()
+ZonedDateTime getPromiseLatestArrivalDate()
+String getCustomerOrderItemId()
+ZonedDateTime getPromiseEffectiveDate()
+boolean isActive()
+ZonedDateTime getPromiseLatestShipDate()
+ZonedDateTime getDeliveryDate()
+String getPromiseProvidedBy()
+String getAsin()
+int getConfidence()
+void setConfidence(boolean isConfidenceTracked, int trackedConfidence)
+void setDeliveryDate(ZonedDateTime deliveryDate)
+String toString()
+{static} class Builder

}

class PromiseHistory{

-Order order
-List<Promise> promises

+PromiseHistory(Order order)
+Order getOrder()
+void addPromise(Promise newPromise)
+List<Promise> getPromises()

}

class App{

-App()
+{static} PromiseHistoryClient getPromiseHistoryClient()
+{static} GetPromiseHistoryByOrderIdActivity getPromiseHistoryByOrderIdActivity()
+{static} OrderDao getOrderDao()
+{static} PromiseDao getPromiseDao()
+{static} OrderManipulationAuthorityClient getOrderManipulationAuthorityClient()
+{static} DeliveryPromiseServiceClient getDeliveryPromiseServiceClient()
+{static} OrderFulfillmentServiceClient getOrderFulfillmentServiceClient()
+{static} OrderManipulationAuthority getOrderManipulationAuthority()
+{static} DeliveryPromiseService getDeliveryPromiseService()
+{static} OrderFulfillmentService getOrderFulfillmentService()
+{static} OrderDatastore getOrderDatastore()

}



class Shell{

+ {static} final String SHOW_FIXTURES_FLAG
- {static} final String CONTINUE_PROMPT
- {static} final Collection<String> VALID_YES_NO_ANSWERS
- {static} final String ORDER_ID_PROMPT
- {static} final String UNKNOWN_ORDER_MESSAGE
- {static} final String INLINE_PROMPT

-PromiseHistoryClient promiseHistoryClient
-ATAUserHandler inputHandler
-String unusedPrivateString;

+Shell(PromiseHistoryClient promiseHistoryClient, ATAUserHandler userHandler)
+ {static} void main(String[] args)
String handleUserRequest()
-String renderPromiseHistoryTable(PromiseHistory promiseHistory)
-String renderOrderTable(Order order)
boolean userHasAnotherRequest()
- void processCommandLineArgs(String[] args)
-String renderFixtures()

}


GetPromiseHistoryByOrderIdActivity -- PromiseHistoryClient
GetPromiseHistoryByOrderIdActivity -- PromiseDao
GetPromiseHistoryByOrderIdActivity -- OrderDao
PromiseDao -- DeliveryPromiseServiceClient
PromiseDao -- OrderManipulationAuthorityClient
OrderDao -- OrderManipulationAuthorityClient
PromiseHistory -- Order
PromiseHistory -- Promise
Order -- OrderItem
PromiseDao -- ReadOnlyDao
OrderDao -- ReadOnlyDao
OrderDao ..|> ReadOnlyDao
PromiseDao ..|> ReadOnlyDao










@enduml